import { execSync } from "child_process";
import * as fs from "fs";
import path from "path";

/**
 * This helper adds mocha hooks to run the tests inside one of the projects
 * from test/fixture-projects.
 *
 * @param projectName The base name of the folder with the project to use.
 * @param artifacts The artifacts required to run the tests. The artifacts should be named according
 * to the 'name' property mentioned in the package.json of the artifact.
 */
export function useFixtureProject(projectName: string, artifacts: string[]) {
  let projectPath: string;
  let prevWorkingDir: string;

  before(async () => {
    projectPath = await getFixtureProjectPath(projectName);
  });

  before(() => {
    prevWorkingDir = process.cwd();
    process.chdir(projectPath);

    // Copy the artifacts to the project test folder
    copyArtifactsInTestProject(projectPath, artifacts);

    // Install the dependencies and the artifacts in the project test folder
    installDependenciesAndArtifacts(projectPath, artifacts);
  });

  after(() => {
    process.chdir(prevWorkingDir);
  });
}

export async function getFixtureProjectPath(
  projectName: string
): Promise<string> {
  const normalizedProjectName = projectName.replaceAll("/", path.sep);

  const projectPath = path.join(
    __dirname,
    "..",
    "test",
    "fixture-projects",
    normalizedProjectName
  );

  if (!fs.existsSync(projectPath)) {
    throw new Error(`Fixture project ${projectName} doesn't exist`);
  }

  return getRealPath(projectPath);
}

/**
 * Returns the real path of absolutePath, resolving symlinks.
 *
 * @throws FileNotFoundError if absolutePath doesn't exist.
 */
export async function getRealPath(absolutePath: string): Promise<string> {
  const fsPromises = fs.promises;

  try {
    // This method returns the actual casing.
    // Please read Node.js' docs to learn more.
    return await fsPromises.realpath(path.normalize(absolutePath));
  } catch (e: any) {
    if (e.code === "ENOENT") {
      // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error
      console.error("Path doesn't exist:", absolutePath);
      throw e;
    }

    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error
    console.error("Cannot access to project path:", absolutePath);
    throw e;
  }
}

/**
 * Copy the necessary artifacts from the artifacts folder to the test folder to run the tests
 */
function copyArtifactsInTestProject(projectPath: string, artifacts: string[]) {
  const artifactsPath = path.join(__dirname, "..", "artifacts");

  fs.readdirSync(artifactsPath).forEach((file) => {
    for (const artifact of artifacts) {
      // Adjust the name to match the prefix generated by the 'pnpm pack' command
      const artifactPrefixName = artifact
        .replaceAll("@", "")
        .replaceAll("/", "-");

      if (file.startsWith(artifactPrefixName)) {
        // Overwrite the file if already exists
        fs.copyFileSync(`${artifactsPath}/${file}`, `${projectPath}/${file}`);
        break;
      }
    }
  });
}

function installDependenciesAndArtifacts(
  projectPath: string,
  artifacts: string[]
) {
  // Install the artifacts
  fs.readdirSync(projectPath).forEach((file) => {
    if (file.endsWith(".tgz")) {
      execSync(`npm install ${file}`, { encoding: "utf-8" });
    }
  });

  // Install dependencies mentioned in the package.json of the project
  execSync("npm install", { encoding: "utf-8" });
}
